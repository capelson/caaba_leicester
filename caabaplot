#!/usr/bin/env python3
# -*- coding: utf-8 -*- Time-stamp: <2022-04-21 14:25:16 sander>

# caabaplot: plot results from CAABA
# Rolf Sander, 2017-2020

##############################################################################

import os, sys
assert sys.version_info >= (3, 6)
__target__ = os.readlink(__file__) if os.path.islink(__file__) else __file__
CAABADIR = os.path.realpath(os.path.dirname(__target__)+'/..')
sys.path.insert(1, os.path.realpath(CAABADIR+'/pycaaba'))
from math import sin
from viewport import viewport
from netCDF4 import Dataset, num2date
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from cycler import cycler
from matplotlib.dates import AutoDateFormatter, AutoDateLocator, DateFormatter
from rstools import evaluate_config_file
import ast
#qqq+
from datetime import timedelta
from pytz import timezone
#qqq-

VERBOSE = False

##############################################################################

def evaluate_command_line_arguments():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--inifile', help='configuration file (*.ini)')
    return parser.parse_args()

##############################################################################

import _mecca_spc # created automatically by spc2mpl
spc_names = _mecca_spc.spc_names() # load dictionary
# add family names:
spc_names['NOx'] = 'NO_x'
spc_names['NOy'] = 'NO_y'
spc_names['Clx'] = 'Cl_x'
spc_names['Brx'] = 'Br_x'
spc_names['Ix']  = 'I_x'
spc_names['RGM'] = 'RGM'

def define_family(family, ncvar, tmin, tmax):
    def add_species(pd, units, factor, species):
        if (species in ncvar):
            pd = pd + factor * ncvar[species][tmin:tmax,0,0,0]
            units = ncvar[species].units
        return pd, units
    pd    = 0 # plotdata
    units = False
    if (family=='NOx'): # NOx
        pd, units = add_species(pd, units, 1, 'NO')
        pd, units = add_species(pd, units, 1, 'NO2')
    if (family=='NOy'): # NOy
        pd, units = add_species(pd, units, 1, 'NO')
        pd, units = add_species(pd, units, 1, 'NO2')
        pd, units = add_species(pd, units, 1, 'NO3')
        pd, units = add_species(pd, units, 2, 'N2O5')
        pd, units = add_species(pd, units, 1, 'HONO')
        pd, units = add_species(pd, units, 1, 'HNO3')
        pd, units = add_species(pd, units, 1, 'HNO4')
        pd, units = add_species(pd, units, 1, 'PAN')
        pd, units = add_species(pd, units, 1, 'ClNO2')
        pd, units = add_species(pd, units, 1, 'BrNO2')
        pd, units = add_species(pd, units, 1, 'ClNO3')
        pd, units = add_species(pd, units, 1, 'BrNO3')
    if (family=='Clx'): # total reactive chlorine (excludes HCl)
        pd, units = add_species(pd, units, 1, 'Cl')
        pd, units = add_species(pd, units, 1, 'ClO')
        pd, units = add_species(pd, units, 1, 'HOCl')
        pd, units = add_species(pd, units, 2, 'Cl2O2')
        pd, units = add_species(pd, units, 2, 'Cl2O3')
        pd, units = add_species(pd, units, 1, 'ClNO')        
        pd, units = add_species(pd, units, 1, 'ClNO2')
        pd, units = add_species(pd, units, 1, 'ClONO')
        pd, units = add_species(pd, units, 1, 'ClNO3')
        pd, units = add_species(pd, units, 2, 'Cl2')
        pd, units = add_species(pd, units, 1, 'OClO')
        pd, units = add_species(pd, units, 1, 'BrCl')
        pd, units = add_species(pd, units, 1, 'ICl')
    if (family=='Brx'): # total reactive bromine (excludes HBr)
        pd, units = add_species(pd, units, 1, 'Br')
        pd, units = add_species(pd, units, 1, 'BrO')
        pd, units = add_species(pd, units, 1, 'HOBr')
        pd, units = add_species(pd, units, 1, 'BrNO2')
        pd, units = add_species(pd, units, 1, 'BrNO3')
        pd, units = add_species(pd, units, 2, 'Br2')
        pd, units = add_species(pd, units, 1, 'BrCl')
        pd, units = add_species(pd, units, 1, 'IBr')
    if (family=='Ix'): # total reactive iodine (excludes HI)
        pd, units = add_species(pd, units, 1, 'I')
        pd, units = add_species(pd, units, 1, 'IO')
        pd, units = add_species(pd, units, 1, 'HOI')
        pd, units = add_species(pd, units, 2, 'I2O2')
        pd, units = add_species(pd, units, 1, 'HIO3')
        pd, units = add_species(pd, units, 1, 'INO2')
        pd, units = add_species(pd, units, 1, 'INO3')
        pd, units = add_species(pd, units, 2, 'I2')
        pd, units = add_species(pd, units, 1, 'ICl')
        pd, units = add_species(pd, units, 1, 'IBr')
        pd, units = add_species(pd, units, 1, 'OIO')
    if (family=='RGM'): # reactive gaseous mercury
        pd, units = add_species(pd, units, 1, 'HgO')
        pd, units = add_species(pd, units, 1, 'HgCl')
        pd, units = add_species(pd, units, 1, 'HgCl2')
        pd, units = add_species(pd, units, 1, 'HgBr')
        pd, units = add_species(pd, units, 1, 'HgBr2')
        pd, units = add_species(pd, units, 1, 'ClHgOBr')
        pd, units = add_species(pd, units, 1, 'ClHgBr')
    return pd, units

##############################################################################

def plot_0d(modelruns, species, pagetitle, plottitle,
            ncfilename='caaba_mecca.nc', timeformat='', scalefactor=1.,
            tmin=0, tmax=0):
    # print 'modelruns = %s' % (modelruns)
    # print 'species = %s' % (species)
    # print 'pagetitle = %s' % (pagetitle)
    # print 'plottitle = %s' % (plottitle)
    linecolors = ['k', 'r', 'g', 'b', 'm', 'y', 'c']
    ax = viewport.next()
    ax.set_prop_cycle(cycler('color', linecolors))
    baserun = modelruns[0][1]
    if ((viewport.current == 1) and (pagetitle)):
        # on new page, start with legend on a dummy plot:
        for (modelrundir, modelrunname) in modelruns:
            lines = plt.plot([0,0], label=modelrunname)
            if (modelrunname != baserun):
                plt.setp(lines, linestyle='dotted', linewidth=3)
        plt.axis('off')
        legend = plt.legend(loc='center',
                            mode='expand',
                            fontsize = 'small',
                            title=pagetitle,
                            fancybox=True,
                            shadow=True,
                            borderaxespad=0.)
        plt.setp(legend.get_title(),fontsize='large')
        ax = viewport.next()
        ax.set_prop_cycle(cycler('color', linecolors))
    # loop over all model runs:
    if (tmax>0):
        fulltrange = False # plot only time[tmin:tmax]
    else:
        fulltrange = True # plot full time range
        tmin = 0
    for (modelrundir, modelrunname) in modelruns:
        ncfullfilename = modelrundir+'/'+ncfilename
        ncid = Dataset(ncfullfilename)
        # define time:
        time = ncid.variables['time']
        if (fulltrange):
            tmax = len(time)
        t = num2date(time[tmin:tmax],time.units, only_use_cftime_datetimes=False,
                     only_use_python_datetimes=True)
        #qqq+
        # Q&D soluton for a 5.5 h time shift to India:
        for i in range(len(t)):
            t[i] += timedelta(hours=5.5)
            t[i].replace(tzinfo=timezone('UTC'))
        #qqq-        
        # plot data:
        units = False
        if (species in ncid.variables):
            # 'species' occurs in current modelrun:
            plotdata = ncid.variables[species][tmin:tmax,0,0,0]
            units = ncid.variables[species].units
        else:
            # check if 'species' refers to a family:
            plotdata, units = define_family(species, ncid.variables, tmin, tmax)
        if (units):
            lines = plt.plot(t, scalefactor*plotdata, label=modelrunname)
            plt.ylabel(units)
            if (modelrunname != baserun):
                plt.setp(lines, linestyle='dotted', linewidth=2)
        else:
            # create dummy plot in order to cycle to the next color:
            lines = plt.plot(t, 0.*time[tmin:tmax], linewidth=0)
        ncid.close()
    plt.title(plottitle)
    plt.xlabel('time')
    ax.grid(True) # hoizontal and vertical gridlines in plot
    # x-axis:
    ax.xaxis_date() # x-axis is a date
    xtick_locator = AutoDateLocator()
    # define locations of ticks on time axis:
    ax.xaxis.set_major_locator(xtick_locator) # automatic
    #ax.xaxis.set_major_locator(plt.MaxNLocator(5)) # max number of tick intervals
    # define format of ticks on time axis:
    if (timeformat):
        xformatter = DateFormatter(timeformat)
    else:
        xformatter = ticker.FuncFormatter(viewport.timeformat) # function
    #xformatter = AutoDateFormatter(xtick_locator)
    ax.xaxis.set_major_formatter(xformatter)
    # y-axis:
    # adjust yrange:
    # print 'yrange:', plt.ylim()[0], plt.ylim()[1]
    # plt.ylim(plt.ylim()[0] * 0.9, plt.ylim()[1] * 1.1)
    # show all digits instead of using offset for y-axis:
    ax.yaxis.set_major_formatter(ticker.ScalarFormatter(useOffset=False))
    yformatter = ticker.FuncFormatter(
        lambda x, p: viewport.scientificNotation(x))
    ax.yaxis.set_major_formatter(yformatter)
    ax.yaxis.set_major_locator(plt.MaxNLocator(5)) # max number of tick intervals

def xxxg(modelruns, plotspecies, pdffile='xxxg',
         pagetitle='Gas-phase', timeformat='', tmin=0, tmax=0):
    viewport.init(4, 4, pdffile+'.pdf', 17, 8) # open pdf
    viewport.newpage()
    print('\nPlotting these species:')
    for species in plotspecies: # species loop
        print('%s' % (species), end=' ') ; sys.stdout.flush()
        # define plottitle:
        # try to obtain "spc_names[species]", if undefined, use "species":
        plottitle = r'$\sf ' + spc_names.get(species, species) + r'$'
        # mz_rs_20180722+
        # modifying plottitle for aq with regexp is not necessary anymore
        # because it is done in spc2mpl.awk now.
        # regexp = re.compile('_a([0-9][0-9])')
        # result = regexp.search(species)
        # if result is not None: # aq species:
        #     species2 = species.replace(result.group(0),'_a##')
        #     plottitle = r'$\sf ' + spc_names[species2] + r'$'
        #     plottitle = plottitle.replace('\\aq', '(a'+result.group(1)+')')
        # mz_rs_20180722-
        plot_0d(modelruns, species, pagetitle, plottitle,
                    'caaba_mecca.nc', timeformat, tmin=tmin, tmax=tmax)
    viewport.exit() # close pdf
    print('\nfor these model runs:')
    for modelrun in modelruns:
        print(f'  {modelrun}')
    print(f'To show the results, type:\n  qpdfview {pdffile}.pdf &')

def jval(modelruns, plotjvals, pdffile='jval',
         pagetitle='J-values', timeformat='', tmin=0, tmax=0):
    viewport.init(4, 4, pdffile+'.pdf', 17, 8) # open pdf
    viewport.newpage()
    print('\nPlotting these J-values:')
    for species in plotjvals: # species loop
        print('%s' % (species), end=' ') ; sys.stdout.flush()
        plottitle = species
        plot_0d(modelruns, species, pagetitle, plottitle,
                    'caaba_jval.nc', timeformat, tmin=tmin, tmax=tmax)
    viewport.exit() # close pdf
    print('\nfor these model runs:')
    for modelrun in modelruns:
        print(f'  {modelrun}')
    print(f'To show the results, type:\n  qpdfview {pdffile}.pdf &')

def rxnrates(modelruns, plotrxns, pdffile='rxnrates',
             pagetitle='Reaction rates', timeformat=''):
    import _rxnrates # created automatically by rxn2mpl
    viewport.init(4, 4, pdffile+'.pdf', 17, 8) # open pdf
    viewport.newpage()
    print('\nPlotting these rxns:')
    eqn_names = _rxnrates.eqn_names() # load dictionary
    for rxn in plotrxns: # rxn loop
        print('%s' % (rxn), end=' ') ; sys.stdout.flush()
        plottitle = rxn + ': ' + eqn_names[rxn]
        plot_0d(modelruns, 'RR'+rxn, pagetitle, plottitle,
                    'caaba_mecca_rr.nc', timeformat)
    viewport.exit() # close pdf
    print('\nfor these model runs:')
    for modelrun in modelruns:
        print(f'  {modelrun}')
    print(f'To show the results, type:\n  qpdfview {pdffile}.pdf &')

def rxnrates_scaled(modelruns, plotbudget, pdffile='rxnrates_scaled',
                    timeformat=''):
    from _rxnrates_scaled import rxns # created automatically by rxn2mpl
    viewport.init(4, 4, pdffile+'.pdf', 17, 8) # open pdf
    viewport.newpage()
    print('\nPlotting scaled rxns:')
    for species in plotbudget:
        print('*** plotting', species)
        viewport.newpage()
        pagetitle='%s prod+loss' % (species)
        for (fct, txt, spc, tex) in rxns:
            if (spc==species):
                plottitle = '%s: %s (%+d)' % (txt, tex, fct)
                print(plottitle)
                plot_0d(modelruns, 'RR'+txt, pagetitle, plottitle,
                            'caaba_mecca_rr.nc', timeformat,
                            scalefactor=fct)
    viewport.exit() # close pdf
    print('for these model runs:')
    for modelrun in modelruns:
        print(f'  {modelrun}')
    print(f'To show the results, type:\n  qpdfview {pdffile}.pdf &')

##############################################################################

def makeplots(inifile):

    def reformat_csv(key):
        csv = ini_caabaplot.get(key)
        if (csv):
            return [x.strip() for x in csv.split(',')]
        else:
            return None

    if (inifile):
        # read settings from [caabaplot] section of config (*.ini) file:
        ini_caabaplot = evaluate_config_file(inifile, 'caabaplot', VERBOSE)
        modelruns    = ast.literal_eval(ini_caabaplot.get( 'modelruns',
                       "[['.', 'latest run']]"))
        plotspecies  = reformat_csv('plotspecies')
        plotjvals    = reformat_csv('plotjvals')
        plotrxns     = reformat_csv('plotrxns')
        plotbudget   = reformat_csv('plotbudget')
        timeformat   = ini_caabaplot.get('timeformat')
    else:
        # default settings if no config (*.ini) file is provided:
        print('No config file (*.ini). Using default settings.')
        modelruns   = [['.', 'latest run']]
        plotspecies = ['O3', 'H2O2', 'NO', 'NO2', 'NOx', 'CH4', 'C2H2',
                       'OH', 'HO2', 'NH3', 'N2O5', 'Cl', 'Clx', 'Cl2',
                       'Clm_a01','Clm_a02', 'ClO', 'HCl','HOCl','ClNO2', 'ClNO']  
       #                'HO12CO3C4', 'APINENE', 'BrO', 'DMS', 'SO2', 'Hg']
        plotjvals   = ['J_O2', 'J_O3P', 'J_O1D', 'J_H2O2', 'J_NO2', 'J_NO2O',
                       'J_NOO2', 'J_N2O5', 'J_HNO3', 'J_HNO4', 'J_PAN', 'J_HONO']
        plotrxns    = ['G1000', 'G1001', 'G2100']
        plotbudget  = ['O3', 'OH', 'ClNO2', 'H2O2', 'NO2', 'CH4', 'C2H2']
        timeformat = ''

    #-------------------------------------------------------------------------
    # plot species:
    if (plotspecies):
        if (plotspecies[0]=='*'): # plot all species
            plotspecies = []
            ncid = Dataset(modelruns[0][0]+'/caaba_mecca.nc')
            for var in sorted(ncid.variables):
                if (ncid.variables[var].ndim==4): # exclude lon, lat, lev, time
                    plotspecies.append(var)
            ncid.close()
        xxxg(modelruns, plotspecies, 'output/xxxg', timeformat=timeformat)
    else:
        print('\nSkipping plots of species.')
   #-------------------------------------------------------------------------
    # plot J-values:
    jvalfilename = modelruns[0][0]+'/caaba_jval.nc'
    if ((plotjvals) and (os.path.isfile(jvalfilename))):
        if (plotjvals[0]=='*'): # plot all j-values
            plotjvals = []
            ncid = Dataset(jvalfilename)
            for var in sorted(ncid.variables):
                if (ncid.variables[var].ndim==4): # exclude lon, lat, lev, time
                    plotjvals.append(var)
            ncid.close()
        jval(modelruns, plotjvals, 'output/jval', timeformat=timeformat)
    else:
        print('\nSkipping plots of j values.')
    #-------------------------------------------------------------------------
    # plot reactions:
    rxnfilename = modelruns[0][0]+'/caaba_mecca_rr.nc'
    if ((plotrxns) and (os.path.isfile(rxnfilename))):
        if (plotrxns[0]=='*'): # plot all reactions
            plotrxns = []
            ncid = Dataset(rxnfilename)
            for rxn in ncid.variables:
                if (rxn[0:2]=='RR'):
                    plotrxns.append(rxn[2:])
            ncid.close()
        rxnrates(modelruns, plotrxns, 'output/rxnrates')
    else:
        print('\nSkipping plots of reaction rates.')
    #-------------------------------------------------------------------------
    # plot budgets (scaled reaction rates):
    rxnfilename = modelruns[0][0]+'/caaba_mecca_rr.nc'
    if ((plotbudget) and (os.path.isfile(rxnfilename))):
        if (plotbudget[0]=='*'): # plot budget for all species
            plotbudget = []
            ncid = Dataset(modelruns[0][0]+'/caaba_mecca.nc')
            for var in sorted(ncid.variables):
                if (ncid.variables[var].ndim==4): # exclude lon, lat, lev, time
                    plotbudget.append(var)
            ncid.close()
        rxnrates_scaled(modelruns, plotbudget, 'output/rxnrates_scaled')
    else:
        print('\nSkipping plots of budgets (scaled reaction rates).')
    #-------------------------------------------------------------------------

##############################################################################

if __name__ == '__main__':

    args = evaluate_command_line_arguments()
    if (args.inifile):
        # type inifile with or without ini/ directory name and extension .ini:
        inifile = '%s/ini/%s.ini' % (CAABADIR,
            os.path.splitext(os.path.basename(args.inifile))[0])
    else:
        print('\nRunning caabaplot using example.ini as config file')
        inifile = f'{CAABADIR}/ini/caaba_delhi.ini'
    makeplots(inifile)

##############################################################################
